#include "MCTargetDesc/RISCSimMCTargetDesc.h"
#include "RISCSim.h"
#include "RISCSimTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "RISCSim-isel"

namespace {

class RISCSimDAGToDAGISel : public SelectionDAGISel {
  const RISCSimSubtarget *Subtarget = nullptr;

public:
  static char ID;
  RISCSimDAGToDAGISel() = delete;
  explicit RISCSimDAGToDAGISel(RISCSimTargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<RISCSimSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  StringRef getPassName() const override {
    return "RISCSim DAG->DAG Pattern Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "RISCSimGenDAGISel.inc"
};

} // end anonymous namespace

char RISCSimDAGToDAGISel::ID = 0;

/// This pass converts a legalized DAG into a RISCSim-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createRISCSimISelDag(RISCSimTargetMachine &TM) {
  return new RISCSimDAGToDAGISel(TM);
}

void RISCSimDAGToDAGISel::Select(SDNode *Node) {
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  SDLoc DL(Node);
  SelectCode(Node);
}
/*
bool RISCSimDAGToDAGISel::selectMemRegAddrISH4(SDValue Addr, SDValue &Base,
                                       SDValue &Offset) const {
  llvm_unreachable("Unimplemented function [from InstrInfo.td]");
  return false;
}
*/
